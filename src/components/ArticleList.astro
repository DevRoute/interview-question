---
import { getCollection } from 'astro:content'
import { transformMenuData } from '@/utils/data'
import { getSortedPosts } from '@/utils/content'
import { clsx } from 'clsx'
export interface ListItem {
  id: string
  title: string
  description: string
  pubDate: Date
  category: string
  tags: string[]
  draft: boolean
  sticky: number
}
//TODO:Typescript没有设置

const { type, post } = Astro.props

const data = await getCollection(type)
const dataNew = await getSortedPosts(type)
const listNew = dataNew.map((item: any) => {
  return {
    id: item.id,
    ...item.data,
  }
}) as ListItem[]
const list = data.map((item: any) => {
  return {
    id: item.id,
    ...item.data,
  }
}) as ListItem[]

const menu = transformMenuData(list)

const menuNew = transformMenuData(listNew)
---

<ul class="pl-4">
  {
    menu.map((item) => (
      <li class="font-thin">
        {!item.children ? (
          <div class={clsx('dark:text-white pb-1', item.id === post.id ? 'text-accent' : '')}>
            <a href={`/blog/${type}/${item.id}`}>{item.title}</a>
          </div>
        ) : (
          <div class="text-base font-semibold py-1 text-black dark:text-white capitalize">
            {item.title}
          </div>
        )}
        {item.children && item.children.length > 0 && (
          <ul class="border-l border-gray-200">
            {item.children.map((child: any) => (
              <li
                class={`pl-4 ${child.id === post.id ? 'bg-gray-100 border-l-2 border-blue-500 dark:bg-white/5' : ''}`}
              >
                <a
                  href={`/blog/${type}/${child.id}`}
                  class="text-base block py-1 hover:text-blue-500"
                >
                  {child.title}
                </a>
              </li>
            ))}
          </ul>
        )}
      </li>
    ))
  }
</ul>
